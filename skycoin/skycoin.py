# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _skycoin
else:
    import _skycoin

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def equalSlices(slice1, slice2, elem_size):
    return _skycoin.equalSlices(slice1, slice2, elem_size)

def equalTransactions(t1, t2):
    return _skycoin.equalTransactions(t1, t2)

def equalTransactionsArrays(pTxs1, pTxs2):
    return _skycoin.equalTransactionsArrays(pTxs1, pTxs2)

def equalBlockHeaders(bh1, bh2):
    return _skycoin.equalBlockHeaders(bh1, bh2)

def destroy_cipher_SecKeys(p):
    return _skycoin.destroy_cipher_SecKeys(p)

def destroy_cipher_PubKeys(p):
    return _skycoin.destroy_cipher_PubKeys(p)

def wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed(seed, n):
    return _skycoin.wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed(seed, n)

def SKY_params_GetDistributionAddresses():
    return _skycoin.SKY_params_GetDistributionAddresses()

def SKY_params_GetUnlockedDistributionAddresses():
    return _skycoin.SKY_params_GetUnlockedDistributionAddresses()

def SKY_params_GetLockedDistributionAddresses():
    return _skycoin.SKY_params_GetLockedDistributionAddresses()
class cipher_PubKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_PubKey___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_PubKey_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_PubKey_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_PubKey_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_PubKey_assignTo(self, data)
    data = property(_skycoin.cipher_PubKey_data_get, _skycoin.cipher_PubKey_data_set)

    def __init__(self):
        _skycoin.cipher_PubKey_swiginit(self, _skycoin.new_cipher_PubKey())
    __swig_destroy__ = _skycoin.delete_cipher_PubKey

# Register cipher_PubKey in _skycoin:
_skycoin.cipher_PubKey_swigregister(cipher_PubKey)

class cipher_SecKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_SecKey___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_SecKey_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_SecKey_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_SecKey_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_SecKey_assignTo(self, data)
    data = property(_skycoin.cipher_SecKey_data_get, _skycoin.cipher_SecKey_data_set)

    def __init__(self):
        _skycoin.cipher_SecKey_swiginit(self, _skycoin.new_cipher_SecKey())
    __swig_destroy__ = _skycoin.delete_cipher_SecKey

# Register cipher_SecKey in _skycoin:
_skycoin.cipher_SecKey_swigregister(cipher_SecKey)

class cipher_Ripemd160(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Ripemd160___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Ripemd160_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Ripemd160_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Ripemd160_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Ripemd160_assignTo(self, data)
    data = property(_skycoin.cipher_Ripemd160_data_get, _skycoin.cipher_Ripemd160_data_set)

    def __init__(self):
        _skycoin.cipher_Ripemd160_swiginit(self, _skycoin.new_cipher_Ripemd160())
    __swig_destroy__ = _skycoin.delete_cipher_Ripemd160

# Register cipher_Ripemd160 in _skycoin:
_skycoin.cipher_Ripemd160_swigregister(cipher_Ripemd160)

class cipher_Sig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Sig___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Sig_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Sig_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Sig_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Sig_assignTo(self, data)
    data = property(_skycoin.cipher_Sig_data_get, _skycoin.cipher_Sig_data_set)

    def __init__(self):
        _skycoin.cipher_Sig_swiginit(self, _skycoin.new_cipher_Sig())
    __swig_destroy__ = _skycoin.delete_cipher_Sig

# Register cipher_Sig in _skycoin:
_skycoin.cipher_Sig_swigregister(cipher_Sig)

class cipher_SHA256(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_SHA256___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_SHA256_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_SHA256_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_SHA256_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_SHA256_assignTo(self, data)
    data = property(_skycoin.cipher_SHA256_data_get, _skycoin.cipher_SHA256_data_set)

    def __init__(self):
        _skycoin.cipher_SHA256_swiginit(self, _skycoin.new_cipher_SHA256())
    __swig_destroy__ = _skycoin.delete_cipher_SHA256

# Register cipher_SHA256 in _skycoin:
_skycoin.cipher_SHA256_swigregister(cipher_SHA256)

class cipher_Checksum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Checksum___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Checksum_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Checksum_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Checksum_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Checksum_assignTo(self, data)
    data = property(_skycoin.cipher_Checksum_data_get, _skycoin.cipher_Checksum_data_set)

    def __init__(self):
        _skycoin.cipher_Checksum_swiginit(self, _skycoin.new_cipher_Checksum())
    __swig_destroy__ = _skycoin.delete_cipher_Checksum

# Register cipher_Checksum in _skycoin:
_skycoin.cipher_Checksum_swigregister(cipher_Checksum)

class cipher_SecKeys(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_SecKeys_getAt(self, i)

    def setAt(self, i, seckey):
        return _skycoin.cipher_SecKeys_setAt(self, i, seckey)

    def __eq__(self, a):
        return _skycoin.cipher_SecKeys___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_SecKeys_allocate(self, n)

    def release(self):
        return _skycoin.cipher_SecKeys_release(self)
    data = property(_skycoin.cipher_SecKeys_data_get, _skycoin.cipher_SecKeys_data_set)
    count = property(_skycoin.cipher_SecKeys_count_get, _skycoin.cipher_SecKeys_count_set)

    def __init__(self):
        _skycoin.cipher_SecKeys_swiginit(self, _skycoin.new_cipher_SecKeys())
    __swig_destroy__ = _skycoin.delete_cipher_SecKeys

# Register cipher_SecKeys in _skycoin:
_skycoin.cipher_SecKeys_swigregister(cipher_SecKeys)

class cipher_PubKeys(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_PubKeys_getAt(self, i)

    def setAt(self, i, pubkey):
        return _skycoin.cipher_PubKeys_setAt(self, i, pubkey)

    def __eq__(self, a):
        return _skycoin.cipher_PubKeys___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_PubKeys_allocate(self, n)

    def release(self):
        return _skycoin.cipher_PubKeys_release(self)
    data = property(_skycoin.cipher_PubKeys_data_get, _skycoin.cipher_PubKeys_data_set)
    count = property(_skycoin.cipher_PubKeys_count_get, _skycoin.cipher_PubKeys_count_set)

    def __init__(self):
        _skycoin.cipher_PubKeys_swiginit(self, _skycoin.new_cipher_PubKeys())
    __swig_destroy__ = _skycoin.delete_cipher_PubKeys

# Register cipher_PubKeys in _skycoin:
_skycoin.cipher_PubKeys_swigregister(cipher_PubKeys)

class cipher_SHA256s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_SHA256s_getAt(self, i)

    def setAt(self, i, hash):
        return _skycoin.cipher_SHA256s_setAt(self, i, hash)

    def __eq__(self, a):
        return _skycoin.cipher_SHA256s___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_SHA256s_allocate(self, n)

    def release(self):
        return _skycoin.cipher_SHA256s_release(self)
    data = property(_skycoin.cipher_SHA256s_data_get, _skycoin.cipher_SHA256s_data_set)
    count = property(_skycoin.cipher_SHA256s_count_get, _skycoin.cipher_SHA256s_count_set)

    def __init__(self):
        _skycoin.cipher_SHA256s_swiginit(self, _skycoin.new_cipher_SHA256s())
    __swig_destroy__ = _skycoin.delete_cipher_SHA256s

# Register cipher_SHA256s in _skycoin:
_skycoin.cipher_SHA256s_swigregister(cipher_SHA256s)

class coin_UxOutArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = property(_skycoin.coin_UxOutArray_data_get, _skycoin.coin_UxOutArray_data_set)
    count = property(_skycoin.coin_UxOutArray_count_get, _skycoin.coin_UxOutArray_count_set)

    def __init__(self):
        _skycoin.coin_UxOutArray_swiginit(self, _skycoin.new_coin_UxOutArray())
    __swig_destroy__ = _skycoin.delete_coin_UxOutArray

# Register coin_UxOutArray in _skycoin:
_skycoin.coin_UxOutArray_swigregister(coin_UxOutArray)

class cipher_Addresses(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = property(_skycoin.cipher_Addresses_data_get, _skycoin.cipher_Addresses_data_set)
    count = property(_skycoin.cipher_Addresses_count_get, _skycoin.cipher_Addresses_count_set)

    def __init__(self):
        _skycoin.cipher_Addresses_swiginit(self, _skycoin.new_cipher_Addresses())
    __swig_destroy__ = _skycoin.delete_cipher_Addresses

# Register cipher_Addresses in _skycoin:
_skycoin.cipher_Addresses_swigregister(cipher_Addresses)

class Fee_Calculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    callback = property(_skycoin.Fee_Calculator_callback_get, _skycoin.Fee_Calculator_callback_set)
    context = property(_skycoin.Fee_Calculator_context_get, _skycoin.Fee_Calculator_context_set)

    def __init__(self):
        _skycoin.Fee_Calculator_swiginit(self, _skycoin.new_Fee_Calculator())
    __swig_destroy__ = _skycoin.delete_Fee_Calculator

# Register Fee_Calculator in _skycoin:
_skycoin.Fee_Calculator_swigregister(Fee_Calculator)

class _GoString_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    p = property(_skycoin._GoString__p_get, _skycoin._GoString__p_set)
    n = property(_skycoin._GoString__n_get, _skycoin._GoString__n_set)

    def __init__(self):
        _skycoin._GoString__swiginit(self, _skycoin.new__GoString_())
    __swig_destroy__ = _skycoin.delete__GoString_

# Register _GoString_ in _skycoin:
_skycoin._GoString__swigregister(_GoString_)

class GoInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    t = property(_skycoin.GoInterface_t_get, _skycoin.GoInterface_t_set)
    v = property(_skycoin.GoInterface_v_get, _skycoin.GoInterface_v_set)

    def __init__(self):
        _skycoin.GoInterface_swiginit(self, _skycoin.new_GoInterface())
    __swig_destroy__ = _skycoin.delete_GoInterface

# Register GoInterface in _skycoin:
_skycoin.GoInterface_swigregister(GoInterface)

class GoSlice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = property(_skycoin.GoSlice_data_get, _skycoin.GoSlice_data_set)
    len = property(_skycoin.GoSlice_len_get, _skycoin.GoSlice_len_set)
    cap = property(_skycoin.GoSlice_cap_get, _skycoin.GoSlice_cap_set)

    def __init__(self):
        _skycoin.GoSlice_swiginit(self, _skycoin.new_GoSlice())
    __swig_destroy__ = _skycoin.delete_GoSlice

# Register GoSlice in _skycoin:
_skycoin.GoSlice_swigregister(GoSlice)


def SKY_wallet_CryptoTypeFromString(p0):
    return _skycoin.SKY_wallet_CryptoTypeFromString(p0)

def SKY_coin_Create_Transaction():
    return _skycoin.SKY_coin_Create_Transaction()

def SKY_coin_Transaction_Copy(p0):
    return _skycoin.SKY_coin_Transaction_Copy(p0)

def SKY_coin_GetTransactionObject(p0):
    return _skycoin.SKY_coin_GetTransactionObject(p0)

def SKY_coin_Transaction_ResetInputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetInputs(p0, p1)

def SKY_coin_Transaction_GetInputsCount(p0):
    return _skycoin.SKY_coin_Transaction_GetInputsCount(p0)

def SKY_coin_Transaction_GetInputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetInputAt(p0, p1, p2)

def SKY_coin_Transaction_SetInputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetInputAt(p0, p1, p2)

def SKY_coin_Transaction_GetOutputsCount(p0):
    return _skycoin.SKY_coin_Transaction_GetOutputsCount(p0)

def SKY_coin_Transaction_GetOutputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetOutputAt(p0, p1, p2)

def SKY_coin_Transaction_SetOutputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetOutputAt(p0, p1, p2)

def SKY_coin_Transaction_GetSignaturesCount(p0):
    return _skycoin.SKY_coin_Transaction_GetSignaturesCount(p0)

def SKY_coin_Transaction_GetSignatureAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetSignatureAt(p0, p1, p2)

def SKY_coin_Transaction_SetSignatureAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetSignatureAt(p0, p1, p2)

def SKY_coin_Transaction_PushSignature(p0, p1):
    return _skycoin.SKY_coin_Transaction_PushSignature(p0, p1)

def SKY_coin_Transaction_ResetOutputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetOutputs(p0, p1)

def SKY_coin_Transaction_ResetSignatures(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetSignatures(p0, p1)

def SKY_coin_Transaction_Verify(p0):
    return _skycoin.SKY_coin_Transaction_Verify(p0)

def SKY_coin_Transaction_VerifyInput(*args):
    return _skycoin.SKY_coin_Transaction_VerifyInput(*args)

def SKY_coin_Transaction_PushInput(p0, p1):
    return _skycoin.SKY_coin_Transaction_PushInput(p0, p1)

def SKY_coin_TransactionOutput_UxID(p0, p1, p2):
    return _skycoin.SKY_coin_TransactionOutput_UxID(p0, p1, p2)

def SKY_coin_Transaction_PushOutput(p0, p1, p2, p3):
    return _skycoin.SKY_coin_Transaction_PushOutput(p0, p1, p2, p3)

def SKY_coin_Transaction_SignInputs(*args):
    return _skycoin.SKY_coin_Transaction_SignInputs(*args)

def SKY_coin_Transaction_Size(p0):
    return _skycoin.SKY_coin_Transaction_Size(p0)

def SKY_coin_Transaction_Hash(p0, p1):
    return _skycoin.SKY_coin_Transaction_Hash(p0, p1)

def SKY_coin_Transaction_SizeHash(p0, p2):
    return _skycoin.SKY_coin_Transaction_SizeHash(p0, p2)

def SKY_coin_Transaction_TxID(p0):
    return _skycoin.SKY_coin_Transaction_TxID(p0)

def SKY_coin_Transaction_TxIDHex(p0):
    return _skycoin.SKY_coin_Transaction_TxIDHex(p0)

def SKY_coin_Transaction_UpdateHeader(p0):
    return _skycoin.SKY_coin_Transaction_UpdateHeader(p0)

def SKY_coin_Transaction_HashInner(p0, p1):
    return _skycoin.SKY_coin_Transaction_HashInner(p0, p1)

def SKY_coin_Transaction_Serialize(p0):
    return _skycoin.SKY_coin_Transaction_Serialize(p0)

def SKY_coin_TransactionDeserialize(p0):
    return _skycoin.SKY_coin_TransactionDeserialize(p0)

def SKY_coin_Transaction_OutputHours(p0):
    return _skycoin.SKY_coin_Transaction_OutputHours(p0)

def SKY_coin_Create_Transactions():
    return _skycoin.SKY_coin_Create_Transactions()

def SKY_coin_GetTransactionsObject(p0, p1):
    return _skycoin.SKY_coin_GetTransactionsObject(p0, p1)

def SKY_coin_Transactions_Length(p0):
    return _skycoin.SKY_coin_Transactions_Length(p0)

def SKY_coin_Transactions_Add(p0, p1):
    return _skycoin.SKY_coin_Transactions_Add(p0, p1)

def SKY_coin_Transactions_Fees(p0, p1):
    return _skycoin.SKY_coin_Transactions_Fees(p0, p1)

def SKY_coin_Transactions_GetAt(p0, p1):
    return _skycoin.SKY_coin_Transactions_GetAt(p0, p1)

def SKY_coin_Transactions_Hashes(*args):
    return _skycoin.SKY_coin_Transactions_Hashes(*args)

def SKY_coin_Transactions_Size(p0):
    return _skycoin.SKY_coin_Transactions_Size(p0)

def SKY_coin_Transactions_TruncateBytesTo(p0, p1):
    return _skycoin.SKY_coin_Transactions_TruncateBytesTo(p0, p1)

def SKY_coin_SortTransactions(p0, p1):
    return _skycoin.SKY_coin_SortTransactions(p0, p1)

def SKY_coin_NewSortableTransactions(p0, p1, p2):
    return _skycoin.SKY_coin_NewSortableTransactions(p0, p1, p2)

def SKY_coin_SortableTransactions_Sort(p0):
    return _skycoin.SKY_coin_SortableTransactions_Sort(p0)

def SKY_coin_SortableTransactions_Len(p0):
    return _skycoin.SKY_coin_SortableTransactions_Len(p0)

def SKY_coin_SortableTransactions_Less(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Less(p0, p1, p2)

def SKY_coin_SortableTransactions_Swap(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Swap(p0, p1, p2)

def SKY_coin_VerifyTransactionCoinsSpending(*args):
    return _skycoin.SKY_coin_VerifyTransactionCoinsSpending(*args)

def SKY_coin_VerifyTransactionHoursSpending(*args):
    return _skycoin.SKY_coin_VerifyTransactionHoursSpending(*args)

def SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2)

def SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2)

def SKY_cli_LoadConfig():
    return _skycoin.SKY_cli_LoadConfig()

def SKY_cli_Config_FullWalletPath(p0):
    return _skycoin.SKY_cli_Config_FullWalletPath(p0)

def SKY_cli_Config_FullDBPath(p0):
    return _skycoin.SKY_cli_Config_FullDBPath(p0)

def SKY_cli_NewCLI(p0):
    return _skycoin.SKY_cli_NewCLI(p0)

def SKY_cli_NewPasswordReader(p0):
    return _skycoin.SKY_cli_NewPasswordReader(p0)

def SKY_cli_PasswordFromBytes_Password():
    return _skycoin.SKY_cli_PasswordFromBytes_Password()

def SKY_cli_PasswordFromTerm_Password():
    return _skycoin.SKY_cli_PasswordFromTerm_Password()

def SKY_cli_GenerateWallet(p0, p2):
    return _skycoin.SKY_cli_GenerateWallet(p0, p2)

def SKY_cli_MakeAlphanumericSeed():
    return _skycoin.SKY_cli_MakeAlphanumericSeed()

def SKY_cli_CheckWalletBalance(p0, p1, p2):
    return _skycoin.SKY_cli_CheckWalletBalance(p0, p1, p2)

def SKY_cli_GetBalanceOfAddresses(p0, p1, p2):
    return _skycoin.SKY_cli_GetBalanceOfAddresses(p0, p1, p2)

def SKY_cipher_RandByte(p0):
    return _skycoin.SKY_cipher_RandByte(p0)

def SKY_cipher_NewPubKey(p0, p1):
    return _skycoin.SKY_cipher_NewPubKey(p0, p1)

def SKY_cipher_PubKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromHex(p0, p1)

def SKY_cipher_PubKeyFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromSecKey(p0, p1)

def SKY_cipher_PubKeyFromSig(p0, p1, p2):
    return _skycoin.SKY_cipher_PubKeyFromSig(p0, p1, p2)

def SKY_cipher_PubKey_Verify(p0):
    return _skycoin.SKY_cipher_PubKey_Verify(p0)

def SKY_cipher_PubKey_Hex(p0):
    return _skycoin.SKY_cipher_PubKey_Hex(p0)

def SKY_cipher_PubKeyRipemd160(p0, p1):
    return _skycoin.SKY_cipher_PubKeyRipemd160(p0, p1)

def SKY_cipher_NewSecKey(p0, p1):
    return _skycoin.SKY_cipher_NewSecKey(p0, p1)

def SKY_cipher_SecKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromHex(p0, p1)

def SKY_cipher_SecKey_Verify(p0):
    return _skycoin.SKY_cipher_SecKey_Verify(p0)

def SKY_cipher_SecKey_Hex(p0):
    return _skycoin.SKY_cipher_SecKey_Hex(p0)

def SKY_cipher_ECDH(p0, p1):
    return _skycoin.SKY_cipher_ECDH(p0, p1)

def SKY_cipher_NewSig(p0, p1):
    return _skycoin.SKY_cipher_NewSig(p0, p1)

def SKY_cipher_SigFromHex(p0, p1):
    return _skycoin.SKY_cipher_SigFromHex(p0, p1)

def SKY_cipher_Sig_Hex(p0):
    return _skycoin.SKY_cipher_Sig_Hex(p0)

def SKY_cipher_SignHash(p0, p1, p2):
    return _skycoin.SKY_cipher_SignHash(p0, p1, p2)

def SKY_cipher_VerifyAddressSignedHash(p0, p1, p2):
    return _skycoin.SKY_cipher_VerifyAddressSignedHash(p0, p1, p2)

def SKY_cipher_VerifySignedHash(p0, p1):
    return _skycoin.SKY_cipher_VerifySignedHash(p0, p1)

def SKY_cipher_VerifyPubKeySignedHash(p0, p1, p2):
    return _skycoin.SKY_cipher_VerifyPubKeySignedHash(p0, p1, p2)

def SKY_cipher_GenerateKeyPair(p0, p1):
    return _skycoin.SKY_cipher_GenerateKeyPair(p0, p1)

def SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2)

def SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3):
    return _skycoin.SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3)

def SKY_cipher_GenerateDeterministicKeyPairs(*args):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairs(*args)

def SKY_cipher_GenerateDeterministicKeyPairsSeed(p0, p1):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairsSeed(p0, p1)

def SKY_cipher_CheckSecKey(p0):
    return _skycoin.SKY_cipher_CheckSecKey(p0)

def SKY_cipher_CheckSecKeyHash(p0, p1):
    return _skycoin.SKY_cipher_CheckSecKeyHash(p0, p1)

def SKY_map_Get(p1):
    return _skycoin.SKY_map_Get(p1)

def SKY_map_HasKey(p1):
    return _skycoin.SKY_map_HasKey(p1)

def SKY_map_Close():
    return _skycoin.SKY_map_Close()

def SKY_cli_GenerateAddressesInFile(p0, p1, p2):
    return _skycoin.SKY_cli_GenerateAddressesInFile(p0, p1, p2)

def SKY_cli_FormatAddressesAsJSON(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJSON(p0)

def SKY_cli_FormatAddressesAsJoinedArray(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJoinedArray(p0)

def SKY_cli_AddressesToStrings(p0):
    return _skycoin.SKY_cli_AddressesToStrings(p0)

def SKY_logging_EnableColors():
    return _skycoin.SKY_logging_EnableColors()

def SKY_logging_DisableColors():
    return _skycoin.SKY_logging_DisableColors()

def SKY_logging_Disable():
    return _skycoin.SKY_logging_Disable()

def SKY_certutil_NewTLSCertPair(p0, p1, p2):
    return _skycoin.SKY_certutil_NewTLSCertPair(p0, p1, p2)

def SKY_api_NewWalletResponse(p0):
    return _skycoin.SKY_api_NewWalletResponse(p0)

def SKY_apputil_CatchInterruptPanic():
    return _skycoin.SKY_apputil_CatchInterruptPanic()

def SKY_apputil_CatchDebug():
    return _skycoin.SKY_apputil_CatchDebug()

def SKY_apputil_PrintProgramStatus():
    return _skycoin.SKY_apputil_PrintProgramStatus()

def SKY_params_DropletPrecisionToDivisor(p0):
    return _skycoin.SKY_params_DropletPrecisionToDivisor(p0)

def SKY_params_DropletPrecisionCheck(p0, p1):
    return _skycoin.SKY_params_DropletPrecisionCheck(p0, p1)

def SKY_cipher_DecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_DecodeBase58Address(p0, p1)

def SKY_cipher_AddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_AddressFromBytes(p0, p1)

def SKY_cipher_AddressFromPubKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromPubKey(p0, p1)

def SKY_cipher_AddressFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromSecKey(p0, p1)

def SKY_cipher_Address_Null(p0):
    return _skycoin.SKY_cipher_Address_Null(p0)

def SKY_cipher_Address_Bytes(p0):
    return _skycoin.SKY_cipher_Address_Bytes(p0)

def SKY_cipher_Address_Verify(p0, p1):
    return _skycoin.SKY_cipher_Address_Verify(p0, p1)

def SKY_cipher_Address_String(p0):
    return _skycoin.SKY_cipher_Address_String(p0)

def SKY_cipher_Address_Checksum(p0, p1):
    return _skycoin.SKY_cipher_Address_Checksum(p0, p1)

def SKY_testutil_MakeAddress(p0):
    return _skycoin.SKY_testutil_MakeAddress(p0)

def SKY_coin_NewBlock(p0, p1, p2, p3, p4):
    return _skycoin.SKY_coin_NewBlock(p0, p1, p2, p3, p4)

def SKY_coin_SignedBlock_VerifySignature(p0, p1):
    return _skycoin.SKY_coin_SignedBlock_VerifySignature(p0, p1)

def SKY_coin_NewGenesisBlock(p0, p1, p2):
    return _skycoin.SKY_coin_NewGenesisBlock(p0, p1, p2)

def SKY_coin_Block_HashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_HashHeader(p0, p1)

def SKY_coin_Block_PreHashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_PreHashHeader(p0, p1)

def SKY_coin_Block_Time(p0):
    return _skycoin.SKY_coin_Block_Time(p0)

def SKY_coin_Block_Seq(p0):
    return _skycoin.SKY_coin_Block_Seq(p0)

def SKY_coin_Block_HashBody(p0, p1):
    return _skycoin.SKY_coin_Block_HashBody(p0, p1)

def SKY_coin_Block_Size(p0):
    return _skycoin.SKY_coin_Block_Size(p0)

def SKY_coin_Block_String(p0):
    return _skycoin.SKY_coin_Block_String(p0)

def SKY_coin_Block_GetTransaction(p0, p1):
    return _skycoin.SKY_coin_Block_GetTransaction(p0, p1)

def SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5)

def SKY_coin_BlockHeader_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockHeader_Hash(p0, p1)

def SKY_coin_BlockHeader_Bytes(p0):
    return _skycoin.SKY_coin_BlockHeader_Bytes(p0)

def SKY_coin_BlockHeader_String(p0):
    return _skycoin.SKY_coin_BlockHeader_String(p0)

def SKY_coin_BlockBody_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockBody_Hash(p0, p1)

def SKY_coin_BlockBody_Size():
    return _skycoin.SKY_coin_BlockBody_Size()

def SKY_coin_BlockBody_Bytes(p0):
    return _skycoin.SKY_coin_BlockBody_Bytes(p0)

def SKY_coin_CreateUnspents(*args):
    return _skycoin.SKY_coin_CreateUnspents(*args)

def SKY_coin_CreateUnspent(p0, p1, p2, p3):
    return _skycoin.SKY_coin_CreateUnspent(p0, p1, p2, p3)

def SKY_coin_GetBlockObject(p0):
    return _skycoin.SKY_coin_GetBlockObject(p0)

def SKY_coin_GetBlockBody(p0):
    return _skycoin.SKY_coin_GetBlockBody(p0)

def SKY_coin_NewEmptyBlock(p0):
    return _skycoin.SKY_coin_NewEmptyBlock(p0)

def SKY_coin_Block_GetBlockHeader(p0, p1):
    return _skycoin.SKY_coin_Block_GetBlockHeader(p0, p1)

def SKY_coin_GetBlockHeaderObject(p0, p1):
    return _skycoin.SKY_coin_GetBlockHeaderObject(p0, p1)

def SKY_coin_BlockHeader_Time(p0):
    return _skycoin.SKY_coin_BlockHeader_Time(p0)

def SKY_coin_BlockHeader_BkSeq(p0):
    return _skycoin.SKY_coin_BlockHeader_BkSeq(p0)

def SKY_coin_BlockHeader_UxHash(p0, p1):
    return _skycoin.SKY_coin_BlockHeader_UxHash(p0, p1)

def SKY_coin_BlockHeader_Fee(p0):
    return _skycoin.SKY_coin_BlockHeader_Fee(p0)

def SKY_coin_BlockBody_Transactions(p0):
    return _skycoin.SKY_coin_BlockBody_Transactions(p0)

def SKY_wallet_Entry_Verify(p0):
    return _skycoin.SKY_wallet_Entry_Verify(p0)

def SKY_wallet_Entry_VerifyPublic(p0):
    return _skycoin.SKY_wallet_Entry_VerifyPublic(p0)

def SKY_api_NewCreateTransactionResponse(p0, p1):
    return _skycoin.SKY_api_NewCreateTransactionResponse(p0, p1)

def SKY_api_NewCreatedTransaction(p0, p1):
    return _skycoin.SKY_api_NewCreatedTransaction(p0, p1)

def SKY_api_CreatedTransaction_ToTransaction(p0):
    return _skycoin.SKY_api_CreatedTransaction_ToTransaction(p0)

def SKY_api_NewCreatedTransactionOutput(p0, p1):
    return _skycoin.SKY_api_NewCreatedTransactionOutput(p0, p1)

def SKY_api_NewCreatedTransactionInput(p0):
    return _skycoin.SKY_api_NewCreatedTransactionInput(p0)

def SKY_cli_AddPrivateKey(p0, p1):
    return _skycoin.SKY_cli_AddPrivateKey(p0, p1)

def SKY_cli_AddPrivateKeyToFile(p0, p1, p2):
    return _skycoin.SKY_cli_AddPrivateKeyToFile(p0, p1, p2)

def SKY_bip39_NewDefaultMnemomic():
    return _skycoin.SKY_bip39_NewDefaultMnemomic()

def SKY_bip39_NewEntropy(p0):
    return _skycoin.SKY_bip39_NewEntropy(p0)

def SKY_bip39_NewMnemonic(p0):
    return _skycoin.SKY_bip39_NewMnemonic(p0)

def SKY_bip39_MnemonicToByteArray(p0):
    return _skycoin.SKY_bip39_MnemonicToByteArray(p0)

def SKY_bip39_IsMnemonicValid(p0):
    return _skycoin.SKY_bip39_IsMnemonicValid(p0)

def SKY_JsonEncode_Handle(p0):
    return _skycoin.SKY_JsonEncode_Handle(p0)

def SKY_Handle_Progress_GetCurrent(p0):
    return _skycoin.SKY_Handle_Progress_GetCurrent(p0)

def SKY_Handle_Block_GetHeadSeq(p0):
    return _skycoin.SKY_Handle_Block_GetHeadSeq(p0)

def SKY_Handle_Block_GetHeadHash(p0):
    return _skycoin.SKY_Handle_Block_GetHeadHash(p0)

def SKY_Handle_Block_GetPreviousBlockHash(p0):
    return _skycoin.SKY_Handle_Block_GetPreviousBlockHash(p0)

def SKY_Handle_Blocks_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Blocks_GetAt(p0, p1)

def SKY_Handle_Blocks_GetCount(p0):
    return _skycoin.SKY_Handle_Blocks_GetCount(p0)

def SKY_Handle_Connections_GetCount(p0):
    return _skycoin.SKY_Handle_Connections_GetCount(p0)

def SKY_Handle_Strings_GetCount(p0):
    return _skycoin.SKY_Handle_Strings_GetCount(p0)

def SKY_Handle_Strings_Sort(p0):
    return _skycoin.SKY_Handle_Strings_Sort(p0)

def SKY_Handle_Strings_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Strings_GetAt(p0, p1)

def SKY_api_Handle_Client_GetWalletDir(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletDir(p0)

def SKY_api_Handle_Client_GetWalletFileName(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletFileName(p0)

def SKY_api_Handle_Client_GetWalletLabel(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletLabel(p0)

def SKY_api_Handle_Client_GetWalletFullPath(p0, p1):
    return _skycoin.SKY_api_Handle_Client_GetWalletFullPath(p0, p1)

def SKY_api_Handle_GetWalletMeta(p0):
    return _skycoin.SKY_api_Handle_GetWalletMeta(p0)

def SKY_api_Handle_GetWalletEntriesCount(p0):
    return _skycoin.SKY_api_Handle_GetWalletEntriesCount(p0)

def SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0)

def SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3):
    return _skycoin.SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3)

def SKY_api_Handle_WalletResponseGetEntry(p0, p1):
    return _skycoin.SKY_api_Handle_WalletResponseGetEntry(p0, p1)

def SKY_api_Handle_WalletResponseIsEncrypted(p0):
    return _skycoin.SKY_api_Handle_WalletResponseIsEncrypted(p0)

def SKY_api_Handle_WalletResponseGetCryptoType(p0):
    return _skycoin.SKY_api_Handle_WalletResponseGetCryptoType(p0)

def SKY_api_Handle_WalletsResponseGetCount(p0):
    return _skycoin.SKY_api_Handle_WalletsResponseGetCount(p0)

def SKY_api_Handle_WalletsResponseGetAt(p0, p1):
    return _skycoin.SKY_api_Handle_WalletsResponseGetAt(p0, p1)

def SKY_api_Handle_GetWalletFolderAddress(p0):
    return _skycoin.SKY_api_Handle_GetWalletFolderAddress(p0)

def SKY_api_Handle_GetWalletSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletSeed(p0)

def SKY_api_Handle_GetWalletLastSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletLastSeed(p0)

def SKY_api_Handle_GetBuildInfoData(p0):
    return _skycoin.SKY_api_Handle_GetBuildInfoData(p0)

def SKY_coin_AddUint64(p0, p1):
    return _skycoin.SKY_coin_AddUint64(p0, p1)

def SKY_coin_Uint64ToInt64(p0):
    return _skycoin.SKY_coin_Uint64ToInt64(p0)

def SKY_coin_Int64ToUint64(p0):
    return _skycoin.SKY_coin_Int64ToUint64(p0)

def SKY_coin_IntToUint32(p0):
    return _skycoin.SKY_coin_IntToUint32(p0)

def SKY_wallet_NewBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalance(p0, p1, p2)

def SKY_wallet_NewBalanceFromUxOut(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalanceFromUxOut(p0, p1, p2)

def SKY_wallet_Balance_Add(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Add(p0, p1, p2)

def SKY_wallet_Balance_Sub(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Sub(p0, p1, p2)

def SKY_wallet_Balance_Equals(p0, p1):
    return _skycoin.SKY_wallet_Balance_Equals(p0, p1)

def SKY_wallet_Balance_IsZero(p0):
    return _skycoin.SKY_wallet_Balance_IsZero(p0)

def SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4)

def SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5)

def SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5)

def SKY_cli_NewTransaction(p0, p1, p2):
    return _skycoin.SKY_cli_NewTransaction(p0, p1, p2)

def SKY_iputil_LocalhostIP():
    return _skycoin.SKY_iputil_LocalhostIP()

def SKY_iputil_IsLocalhost(p0):
    return _skycoin.SKY_iputil_IsLocalhost(p0)

def SKY_iputil_SplitAddr(p0):
    return _skycoin.SKY_iputil_SplitAddr(p0)

def SKY_coin_UxOut_Hash(p0, p1):
    return _skycoin.SKY_coin_UxOut_Hash(p0, p1)

def SKY_coin_UxOut_SnapshotHash(p0, p1):
    return _skycoin.SKY_coin_UxOut_SnapshotHash(p0, p1)

def SKY_coin_UxBody_Hash(p0, p1):
    return _skycoin.SKY_coin_UxBody_Hash(p0, p1)

def SKY_coin_UxOut_CoinHours(p0, p1):
    return _skycoin.SKY_coin_UxOut_CoinHours(p0, p1)

def SKY_coin_UxArray_Hashes(*args):
    return _skycoin.SKY_coin_UxArray_Hashes(*args)

def SKY_coin_UxArray_HasDupes(*args):
    return _skycoin.SKY_coin_UxArray_HasDupes(*args)

def SKY_coin_UxArray_Sort():
    return _skycoin.SKY_coin_UxArray_Sort()

def SKY_coin_UxArray_Len():
    return _skycoin.SKY_coin_UxArray_Len()

def SKY_coin_UxArray_Less(*args):
    return _skycoin.SKY_coin_UxArray_Less(*args)

def SKY_coin_UxArray_Swap(*args):
    return _skycoin.SKY_coin_UxArray_Swap(*args)

def SKY_coin_UxArray_Coins(*args):
    return _skycoin.SKY_coin_UxArray_Coins(*args)

def SKY_coin_UxArray_CoinHours(*args):
    return _skycoin.SKY_coin_UxArray_CoinHours(*args)

def SKY_coin_UxArray_Sub(*args):
    return _skycoin.SKY_coin_UxArray_Sub(*args)

def SKY_coin_UxArray_Add(*args):
    return _skycoin.SKY_coin_UxArray_Add(*args)

def SKY_coin_NewAddressUxOuts(*args):
    return _skycoin.SKY_coin_NewAddressUxOuts(*args)

def SKY_coin_AddressUxOuts_Keys(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Keys(*args)

def SKY_coin_AddressUxOuts_Flatten(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Flatten(*args)

def SKY_coin_AddressUxOuts_Sub(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_Sub(p0, p1)

def SKY_coin_AddressUxOuts_Add(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_Add(p0, p1)

def SKY_coin_AddressUxOuts_Get(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Get(*args)

def SKY_coin_AddressUxOuts_HasKey(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_HasKey(p0, p1)

def SKY_coin_AddressUxOuts_GetOutputLength(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_GetOutputLength(p0, p1)

def SKY_coin_AddressUxOuts_Length(p0):
    return _skycoin.SKY_coin_AddressUxOuts_Length(p0)

def SKY_coin_AddressUxOuts_Set(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Set(*args)

def SKY_webrpc_NewClient(p0):
    return _skycoin.SKY_webrpc_NewClient(p0)

def SKY_webrpc_Client_CSRF(p0):
    return _skycoin.SKY_webrpc_Client_CSRF(p0)

def SKY_webrpc_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_webrpc_Client_InjectTransaction(p0, p1)

def SKY_webrpc_Client_GetStatus(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetStatus(p0, p1)

def SKY_webrpc_Client_GetTransactionByID(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetTransactionByID(p0, p1, p2)

def SKY_webrpc_Client_GetAddressUxOuts(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetAddressUxOuts(p0, p1)

def SKY_webrpc_Client_GetBlocksInRange(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetBlocksInRange(p0, p1, p2)

def SKY_webrpc_Client_GetBlocksBySeq(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetBlocksBySeq(p0, p1)

def SKY_webrpc_Client_GetLastBlocks(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetLastBlocks(p0, p1)

def SKY_cipher_Ripemd160_Set(p0, p1):
    return _skycoin.SKY_cipher_Ripemd160_Set(p0, p1)

def SKY_cipher_HashRipemd160(p0, p1):
    return _skycoin.SKY_cipher_HashRipemd160(p0, p1)

def SKY_cipher_SHA256_Set(p0, p1):
    return _skycoin.SKY_cipher_SHA256_Set(p0, p1)

def SKY_cipher_SHA256_Hex(p0):
    return _skycoin.SKY_cipher_SHA256_Hex(p0)

def SKY_cipher_SHA256_Xor(p0, p1, p2):
    return _skycoin.SKY_cipher_SHA256_Xor(p0, p1, p2)

def SKY_cipher_SumSHA256(p0, p1):
    return _skycoin.SKY_cipher_SumSHA256(p0, p1)

def SKY_cipher_SHA256FromHex(p0, p1):
    return _skycoin.SKY_cipher_SHA256FromHex(p0, p1)

def SKY_cipher_DoubleSHA256(p0, p1):
    return _skycoin.SKY_cipher_DoubleSHA256(p0, p1)

def SKY_cipher_AddSHA256(p0, p1, p2):
    return _skycoin.SKY_cipher_AddSHA256(p0, p1, p2)

def SKY_cipher_Merkle(p0, p1):
    return _skycoin.SKY_cipher_Merkle(p0, p1)

def SKY_cipher_SHA256_Null(p0):
    return _skycoin.SKY_cipher_SHA256_Null(p0)

def SKY_handle_close(p0):
    return _skycoin.SKY_handle_close(p0)

def SKY_handle_copy(p0):
    return _skycoin.SKY_handle_copy(p0)

def SKY_httphelper_Address_UnmarshalJSON(p0, p1):
    return _skycoin.SKY_httphelper_Address_UnmarshalJSON(p0, p1)

def SKY_httphelper_Address_MarshalJSON(p0):
    return _skycoin.SKY_httphelper_Address_MarshalJSON(p0)

def SKY_httphelper_Coins_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Coins_UnmarshalJSON(p1)

def SKY_httphelper_Coins_MarshalJSON():
    return _skycoin.SKY_httphelper_Coins_MarshalJSON()

def SKY_httphelper_Coins_Value():
    return _skycoin.SKY_httphelper_Coins_Value()

def SKY_httphelper_Hours_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Hours_UnmarshalJSON(p1)

def SKY_httphelper_Hours_MarshalJSON():
    return _skycoin.SKY_httphelper_Hours_MarshalJSON()

def SKY_httphelper_Hours_Value():
    return _skycoin.SKY_httphelper_Hours_Value()

def SKY_wallet_NewReadableEntry(p0, p1):
    return _skycoin.SKY_wallet_NewReadableEntry(p0, p1)

def SKY_wallet_LoadReadableWallet(p0):
    return _skycoin.SKY_wallet_LoadReadableWallet(p0)

def SKY_wallet_ReadableWallet_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Save(p0, p1)

def SKY_wallet_ReadableWallet_Load(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Load(p0, p1)

def SKY_wallet_ReadableWallet_Erase(p0):
    return _skycoin.SKY_wallet_ReadableWallet_Erase(p0)

def SKY_file_InitDataDir(p0):
    return _skycoin.SKY_file_InitDataDir(p0)

def SKY_file_UserHome():
    return _skycoin.SKY_file_UserHome()

def SKY_file_ResolveResourceDirectory(p0):
    return _skycoin.SKY_file_ResolveResourceDirectory(p0)

def SKY_file_DetermineResourcePath(p0, p1, p2):
    return _skycoin.SKY_file_DetermineResourcePath(p0, p1, p2)

def SKY_base58_Hex2Base58(p0):
    return _skycoin.SKY_base58_Hex2Base58(p0)

def SKY_base58_Encode(p0):
    return _skycoin.SKY_base58_Encode(p0)

def SKY_base58_Decode(p0):
    return _skycoin.SKY_base58_Decode(p0)

def SKY_api_NewClient(p0):
    return _skycoin.SKY_api_NewClient(p0)

def SKY_api_Client_CSRF(p0):
    return _skycoin.SKY_api_Client_CSRF(p0)

def SKY_api_Client_Version(p0):
    return _skycoin.SKY_api_Client_Version(p0)

def SKY_api_Client_Outputs(p0):
    return _skycoin.SKY_api_Client_Outputs(p0)

def SKY_api_Client_OutputsForAddresses(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForAddresses(p0, p1)

def SKY_api_Client_OutputsForHashes(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForHashes(p0, p1)

def SKY_api_Client_CoinSupply(p0):
    return _skycoin.SKY_api_Client_CoinSupply(p0)

def SKY_api_Client_BlockByHash(p0, p1):
    return _skycoin.SKY_api_Client_BlockByHash(p0, p1)

def SKY_api_Client_BlockBySeq(p0, p1):
    return _skycoin.SKY_api_Client_BlockBySeq(p0, p1)

def SKY_api_Client_Blocks(p0, p1):
    return _skycoin.SKY_api_Client_Blocks(p0, p1)

def SKY_api_Client_LastBlocks(p0, p1):
    return _skycoin.SKY_api_Client_LastBlocks(p0, p1)

def SKY_api_Client_BlockchainMetadata(p0):
    return _skycoin.SKY_api_Client_BlockchainMetadata(p0)

def SKY_api_Client_BlockchainProgress(p0):
    return _skycoin.SKY_api_Client_BlockchainProgress(p0)

def SKY_api_Client_Balance(p0, p1, p2):
    return _skycoin.SKY_api_Client_Balance(p0, p1, p2)

def SKY_api_Client_UxOut(p0, p1):
    return _skycoin.SKY_api_Client_UxOut(p0, p1)

def SKY_api_Client_AddressUxOuts(p0, p1):
    return _skycoin.SKY_api_Client_AddressUxOuts(p0, p1)

def SKY_api_Client_Wallet(p0, p1):
    return _skycoin.SKY_api_Client_Wallet(p0, p1)

def SKY_api_Client_Wallets(p0):
    return _skycoin.SKY_api_Client_Wallets(p0)

def SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3)

def SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4)

def SKY_api_Client_NewWalletAddress(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_NewWalletAddress(p0, p1, p2, p3)

def SKY_api_Client_WalletBalance(p0, p1, p2):
    return _skycoin.SKY_api_Client_WalletBalance(p0, p1, p2)

def SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5)

def SKY_api_Client_CreateTransaction(p0):
    return _skycoin.SKY_api_Client_CreateTransaction(p0)

def SKY_api_Client_UpdateWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_UpdateWallet(p0, p1, p2)

def SKY_api_Client_WalletFolderName(p0):
    return _skycoin.SKY_api_Client_WalletFolderName(p0)

def SKY_api_Client_NewSeed(p0, p1):
    return _skycoin.SKY_api_Client_NewSeed(p0, p1)

def SKY_api_Client_WalletSeed(p0, p1, p2):
    return _skycoin.SKY_api_Client_WalletSeed(p0, p1, p2)

def SKY_api_Client_NetworkConnection(p0, p1):
    return _skycoin.SKY_api_Client_NetworkConnection(p0, p1)

def SKY_api_Client_NetworkConnections(p0, p1):
    return _skycoin.SKY_api_Client_NetworkConnections(p0, p1)

def SKY_api_Client_NetworkDefaultPeers(p0):
    return _skycoin.SKY_api_Client_NetworkDefaultPeers(p0)

def SKY_api_Client_NetworkTrustedPeers(p0):
    return _skycoin.SKY_api_Client_NetworkTrustedPeers(p0)

def SKY_api_Client_NetworkExchangedPeers(p0):
    return _skycoin.SKY_api_Client_NetworkExchangedPeers(p0)

def SKY_api_Client_PendingTransactions(p0):
    return _skycoin.SKY_api_Client_PendingTransactions(p0)

def SKY_api_Client_Transaction(p0, p1):
    return _skycoin.SKY_api_Client_Transaction(p0, p1)

def SKY_api_Client_Transactions(p0, p1):
    return _skycoin.SKY_api_Client_Transactions(p0, p1)

def SKY_api_Client_ConfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_ConfirmedTransactions(p0, p1)

def SKY_api_Client_UnconfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_UnconfirmedTransactions(p0, p1)

def SKY_api_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_api_Client_InjectTransaction(p0, p1)

def SKY_api_Client_ResendUnconfirmedTransactions(p0):
    return _skycoin.SKY_api_Client_ResendUnconfirmedTransactions(p0)

def SKY_api_Client_RawTransaction(p0, p1):
    return _skycoin.SKY_api_Client_RawTransaction(p0, p1)

def SKY_api_Client_AddressTransactions(p0, p1):
    return _skycoin.SKY_api_Client_AddressTransactions(p0, p1)

def SKY_api_Client_Richlist(p0, p1):
    return _skycoin.SKY_api_Client_Richlist(p0, p1)

def SKY_api_Client_AddressCount(p0):
    return _skycoin.SKY_api_Client_AddressCount(p0)

def SKY_api_Client_UnloadWallet(p0, p1):
    return _skycoin.SKY_api_Client_UnloadWallet(p0, p1)

def SKY_api_Client_Health(p0):
    return _skycoin.SKY_api_Client_Health(p0)

def SKY_api_Client_EncryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_EncryptWallet(p0, p1, p2)

def SKY_api_Client_DecryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_DecryptWallet(p0, p1, p2)

def SKY_wallet_NewError(p0):
    return _skycoin.SKY_wallet_NewError(p0)

def SKY_wallet_NewWallet(p0, p1):
    return _skycoin.SKY_wallet_NewWallet(p0, p1)

def SKY_wallet_Wallet_Lock(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_Lock(p0, p1, p2)

def SKY_wallet_Wallet_Unlock(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Unlock(p0, p1)

def SKY_wallet_Load(p0):
    return _skycoin.SKY_wallet_Load(p0)

def SKY_wallet_Wallet_Save(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Save(p0, p1)

def SKY_wallet_Wallet_Validate(p0):
    return _skycoin.SKY_wallet_Wallet_Validate(p0)

def SKY_wallet_Wallet_Type(p0):
    return _skycoin.SKY_wallet_Wallet_Type(p0)

def SKY_wallet_Wallet_Version(p0):
    return _skycoin.SKY_wallet_Wallet_Version(p0)

def SKY_wallet_Wallet_Filename(p0):
    return _skycoin.SKY_wallet_Wallet_Filename(p0)

def SKY_wallet_Wallet_Label(p0):
    return _skycoin.SKY_wallet_Wallet_Label(p0)

def SKY_wallet_Wallet_IsEncrypted(p0):
    return _skycoin.SKY_wallet_Wallet_IsEncrypted(p0)

def SKY_wallet_Wallet_GenerateAddresses(p0, p1):
    return _skycoin.SKY_wallet_Wallet_GenerateAddresses(p0, p1)

def SKY_wallet_Wallet_GetAddresses(p0):
    return _skycoin.SKY_wallet_Wallet_GetAddresses(p0)

def SKY_wallet_Wallet_GetEntry(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_GetEntry(p0, p1, p2)

def SKY_wallet_Wallet_AddEntry(p0, p1):
    return _skycoin.SKY_wallet_Wallet_AddEntry(p0, p1)

def SKY_wallet_DistributeSpendHours(p0, p1, p2):
    return _skycoin.SKY_wallet_DistributeSpendHours(p0, p1, p2)

def SKY_wallet_DistributeCoinHoursProportional(p0, p1):
    return _skycoin.SKY_wallet_DistributeCoinHoursProportional(p0, p1)

def SKY_wallet_NewUxBalances(p0):
    return _skycoin.SKY_wallet_NewUxBalances(p0)

def SKY_wallet_NewUxBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewUxBalance(p0, p1, p2)

def SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2)

def SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2)

def SKY_cli_CLI_Run(p0):
    return _skycoin.SKY_cli_CLI_Run(p0)

def SKY_cli_Config_GetCoin(p0):
    return _skycoin.SKY_cli_Config_GetCoin(p0)

def SKY_cli_Config_GetRPCAddress(p0):
    return _skycoin.SKY_cli_Config_GetRPCAddress(p0)

def SKY_cli_Getenv(p0):
    return _skycoin.SKY_cli_Getenv(p0)

def SKY_cli_Setenv(p0, p1):
    return _skycoin.SKY_cli_Setenv(p0, p1)

def SKY_fee_VerifyTransactionFee(p0, p1, p2):
    return _skycoin.SKY_fee_VerifyTransactionFee(p0, p1, p2)

def SKY_fee_VerifyTransactionFeeForHours(p0, p1, p2):
    return _skycoin.SKY_fee_VerifyTransactionFeeForHours(p0, p1, p2)

def SKY_fee_RequiredFee(p0, p1):
    return _skycoin.SKY_fee_RequiredFee(p0, p1)

def SKY_fee_RemainingHours(p0, p1):
    return _skycoin.SKY_fee_RemainingHours(p0, p1)

def SKY_fee_TransactionFee(*args):
    return _skycoin.SKY_fee_TransactionFee(*args)

def SKY_cli_GetWalletOutputsFromFile(p0, p1, p2):
    return _skycoin.SKY_cli_GetWalletOutputsFromFile(p0, p1, p2)

def SKY_cli_GetWalletOutputs(p0, p2):
    return _skycoin.SKY_cli_GetWalletOutputs(p0, p2)

def SKY_cipher_DecodeBase58BitcoinAddress(p0, p1):
    return _skycoin.SKY_cipher_DecodeBase58BitcoinAddress(p0, p1)

def SKY_cipher_BitcoinAddressFromPubKey(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddressFromPubKey(p0, p1)

def SKY_cipher_BitcoinAddressFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddressFromSecKey(p0, p1)

def SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0):
    return _skycoin.SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0)

def SKY_cipher_BitcoinAddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddressFromBytes(p0, p1)

def SKY_cipher_SecKeyFromBitcoinWalletImportFormat(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromBitcoinWalletImportFormat(p0, p1)

def SKY_cipher_BitcoinAddress_Null(p0):
    return _skycoin.SKY_cipher_BitcoinAddress_Null(p0)

def SKY_cipher_BitcoinAddress_Bytes(p0):
    return _skycoin.SKY_cipher_BitcoinAddress_Bytes(p0)

def SKY_cipher_BitcoinAddress_Verify(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddress_Verify(p0, p1)

def SKY_cipher_BitcoinAddress_String(p0):
    return _skycoin.SKY_cipher_BitcoinAddress_String(p0)

def SKY_cipher_BitcoinAddress_Checksum(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddress_Checksum(p0, p1)

def SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6):
    return _skycoin.SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6)

def SKY_droplet_FromString(p0):
    return _skycoin.SKY_droplet_FromString(p0)

def SKY_droplet_ToString(p0):
    return _skycoin.SKY_droplet_ToString(p0)
class api__RichlistParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    N = property(_skycoin.api__RichlistParams_N_get, _skycoin.api__RichlistParams_N_set)
    IncludeDistribution = property(_skycoin.api__RichlistParams_IncludeDistribution_get, _skycoin.api__RichlistParams_IncludeDistribution_set)

    def __init__(self):
        _skycoin.api__RichlistParams_swiginit(self, _skycoin.new_api__RichlistParams())
    __swig_destroy__ = _skycoin.delete_api__RichlistParams

# Register api__RichlistParams in _skycoin:
_skycoin.api__RichlistParams_swigregister(api__RichlistParams)

class api__NetworkConnectionsFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    States = property(_skycoin.api__NetworkConnectionsFilter_States_get, _skycoin.api__NetworkConnectionsFilter_States_set)
    Direction = property(_skycoin.api__NetworkConnectionsFilter_Direction_get, _skycoin.api__NetworkConnectionsFilter_Direction_set)

    def __init__(self):
        _skycoin.api__NetworkConnectionsFilter_swiginit(self, _skycoin.new_api__NetworkConnectionsFilter())
    __swig_destroy__ = _skycoin.delete_api__NetworkConnectionsFilter

# Register api__NetworkConnectionsFilter in _skycoin:
_skycoin.api__NetworkConnectionsFilter_swigregister(api__NetworkConnectionsFilter)

class cipher__Address(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher__Address___eq__(self, a)

    def toStr(self):
        return _skycoin.cipher__Address_toStr(self)
    Version = property(_skycoin.cipher__Address_Version_get, _skycoin.cipher__Address_Version_set)
    Key = property(_skycoin.cipher__Address_Key_get, _skycoin.cipher__Address_Key_set)

    def __init__(self):
        _skycoin.cipher__Address_swiginit(self, _skycoin.new_cipher__Address())
    __swig_destroy__ = _skycoin.delete_cipher__Address

# Register cipher__Address in _skycoin:
_skycoin.cipher__Address_swigregister(cipher__Address)

class cipher__BitcoinAddress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher__BitcoinAddress___eq__(self, a)

    def toStr(self):
        return _skycoin.cipher__BitcoinAddress_toStr(self)
    Version = property(_skycoin.cipher__BitcoinAddress_Version_get, _skycoin.cipher__BitcoinAddress_Version_set)
    Key = property(_skycoin.cipher__BitcoinAddress_Key_get, _skycoin.cipher__BitcoinAddress_Key_set)

    def __init__(self):
        _skycoin.cipher__BitcoinAddress_swiginit(self, _skycoin.new_cipher__BitcoinAddress())
    __swig_destroy__ = _skycoin.delete_cipher__BitcoinAddress

# Register cipher__BitcoinAddress in _skycoin:
_skycoin.cipher__BitcoinAddress_swigregister(cipher__BitcoinAddress)

class encrypt__ScryptChacha20poly1305(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    N = property(_skycoin.encrypt__ScryptChacha20poly1305_N_get, _skycoin.encrypt__ScryptChacha20poly1305_N_set)
    R = property(_skycoin.encrypt__ScryptChacha20poly1305_R_get, _skycoin.encrypt__ScryptChacha20poly1305_R_set)
    P = property(_skycoin.encrypt__ScryptChacha20poly1305_P_get, _skycoin.encrypt__ScryptChacha20poly1305_P_set)
    KeyLen = property(_skycoin.encrypt__ScryptChacha20poly1305_KeyLen_get, _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_set)

    def __init__(self):
        _skycoin.encrypt__ScryptChacha20poly1305_swiginit(self, _skycoin.new_encrypt__ScryptChacha20poly1305())
    __swig_destroy__ = _skycoin.delete_encrypt__ScryptChacha20poly1305

# Register encrypt__ScryptChacha20poly1305 in _skycoin:
_skycoin.encrypt__ScryptChacha20poly1305_swigregister(encrypt__ScryptChacha20poly1305)

class secp256k1go__Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    n = property(_skycoin.secp256k1go__Field_n_get, _skycoin.secp256k1go__Field_n_set)

    def __init__(self):
        _skycoin.secp256k1go__Field_swiginit(self, _skycoin.new_secp256k1go__Field())
    __swig_destroy__ = _skycoin.delete_secp256k1go__Field

# Register secp256k1go__Field in _skycoin:
_skycoin.secp256k1go__Field_swigregister(secp256k1go__Field)

class secp256k1go__XY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    X = property(_skycoin.secp256k1go__XY_X_get, _skycoin.secp256k1go__XY_X_set)
    Y = property(_skycoin.secp256k1go__XY_Y_get, _skycoin.secp256k1go__XY_Y_set)
    Infinity = property(_skycoin.secp256k1go__XY_Infinity_get, _skycoin.secp256k1go__XY_Infinity_set)

    def __init__(self):
        _skycoin.secp256k1go__XY_swiginit(self, _skycoin.new_secp256k1go__XY())
    __swig_destroy__ = _skycoin.delete_secp256k1go__XY

# Register secp256k1go__XY in _skycoin:
_skycoin.secp256k1go__XY_swigregister(secp256k1go__XY)

class secp256k1go__XYZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    X = property(_skycoin.secp256k1go__XYZ_X_get, _skycoin.secp256k1go__XYZ_X_set)
    Y = property(_skycoin.secp256k1go__XYZ_Y_get, _skycoin.secp256k1go__XYZ_Y_set)
    Z = property(_skycoin.secp256k1go__XYZ_Z_get, _skycoin.secp256k1go__XYZ_Z_set)
    Infinity = property(_skycoin.secp256k1go__XYZ_Infinity_get, _skycoin.secp256k1go__XYZ_Infinity_set)

    def __init__(self):
        _skycoin.secp256k1go__XYZ_swiginit(self, _skycoin.new_secp256k1go__XYZ())
    __swig_destroy__ = _skycoin.delete_secp256k1go__XYZ

# Register secp256k1go__XYZ in _skycoin:
_skycoin.secp256k1go__XYZ_swigregister(secp256k1go__XYZ)

class cli__SendAmount(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Addr = property(_skycoin.cli__SendAmount_Addr_get, _skycoin.cli__SendAmount_Addr_set)
    Coins = property(_skycoin.cli__SendAmount_Coins_get, _skycoin.cli__SendAmount_Coins_set)

    def __init__(self):
        _skycoin.cli__SendAmount_swiginit(self, _skycoin.new_cli__SendAmount())
    __swig_destroy__ = _skycoin.delete_cli__SendAmount

# Register cli__SendAmount in _skycoin:
_skycoin.cli__SendAmount_swigregister(cli__SendAmount)

class coin__Transaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, t):
        return _skycoin.coin__Transaction___eq__(self, t)
    Length = property(_skycoin.coin__Transaction_Length_get, _skycoin.coin__Transaction_Length_set)
    Type = property(_skycoin.coin__Transaction_Type_get, _skycoin.coin__Transaction_Type_set)
    InnerHash = property(_skycoin.coin__Transaction_InnerHash_get, _skycoin.coin__Transaction_InnerHash_set)
    Sigs = property(_skycoin.coin__Transaction_Sigs_get, _skycoin.coin__Transaction_Sigs_set)
    In = property(_skycoin.coin__Transaction_In_get, _skycoin.coin__Transaction_In_set)
    Out = property(_skycoin.coin__Transaction_Out_get, _skycoin.coin__Transaction_Out_set)

    def __init__(self):
        _skycoin.coin__Transaction_swiginit(self, _skycoin.new_coin__Transaction())
    __swig_destroy__ = _skycoin.delete_coin__Transaction

# Register coin__Transaction in _skycoin:
_skycoin.coin__Transaction_swigregister(coin__Transaction)

class coin__TransactionOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, t):
        return _skycoin.coin__TransactionOutput___eq__(self, t)
    Address = property(_skycoin.coin__TransactionOutput_Address_get, _skycoin.coin__TransactionOutput_Address_set)
    Coins = property(_skycoin.coin__TransactionOutput_Coins_get, _skycoin.coin__TransactionOutput_Coins_set)
    Hours = property(_skycoin.coin__TransactionOutput_Hours_get, _skycoin.coin__TransactionOutput_Hours_set)

    def __init__(self):
        _skycoin.coin__TransactionOutput_swiginit(self, _skycoin.new_coin__TransactionOutput())
    __swig_destroy__ = _skycoin.delete_coin__TransactionOutput

# Register coin__TransactionOutput in _skycoin:
_skycoin.coin__TransactionOutput_swigregister(coin__TransactionOutput)

class coin__BlockHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, bh):
        return _skycoin.coin__BlockHeader___eq__(self, bh)
    Version = property(_skycoin.coin__BlockHeader_Version_get, _skycoin.coin__BlockHeader_Version_set)
    Time = property(_skycoin.coin__BlockHeader_Time_get, _skycoin.coin__BlockHeader_Time_set)
    BkSeq = property(_skycoin.coin__BlockHeader_BkSeq_get, _skycoin.coin__BlockHeader_BkSeq_set)
    Fee = property(_skycoin.coin__BlockHeader_Fee_get, _skycoin.coin__BlockHeader_Fee_set)
    PrevHash = property(_skycoin.coin__BlockHeader_PrevHash_get, _skycoin.coin__BlockHeader_PrevHash_set)
    BodyHash = property(_skycoin.coin__BlockHeader_BodyHash_get, _skycoin.coin__BlockHeader_BodyHash_set)
    UxHash = property(_skycoin.coin__BlockHeader_UxHash_get, _skycoin.coin__BlockHeader_UxHash_set)

    def __init__(self):
        _skycoin.coin__BlockHeader_swiginit(self, _skycoin.new_coin__BlockHeader())
    __swig_destroy__ = _skycoin.delete_coin__BlockHeader

# Register coin__BlockHeader in _skycoin:
_skycoin.coin__BlockHeader_swigregister(coin__BlockHeader)

class coin__BlockBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _skycoin.coin__BlockBody___eq__(self, b)
    Transactions = property(_skycoin.coin__BlockBody_Transactions_get, _skycoin.coin__BlockBody_Transactions_set)

    def __init__(self):
        _skycoin.coin__BlockBody_swiginit(self, _skycoin.new_coin__BlockBody())
    __swig_destroy__ = _skycoin.delete_coin__BlockBody

# Register coin__BlockBody in _skycoin:
_skycoin.coin__BlockBody_swigregister(coin__BlockBody)

class coin__Block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Head = property(_skycoin.coin__Block_Head_get, _skycoin.coin__Block_Head_set)
    Body = property(_skycoin.coin__Block_Body_get, _skycoin.coin__Block_Body_set)

    def __init__(self):
        _skycoin.coin__Block_swiginit(self, _skycoin.new_coin__Block())
    __swig_destroy__ = _skycoin.delete_coin__Block

# Register coin__Block in _skycoin:
_skycoin.coin__Block_swigregister(coin__Block)

class coin__SignedBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _unnamed = property(_skycoin.coin__SignedBlock__unnamed_get, _skycoin.coin__SignedBlock__unnamed_set)
    Sig = property(_skycoin.coin__SignedBlock_Sig_get, _skycoin.coin__SignedBlock_Sig_set)

    def __init__(self):
        _skycoin.coin__SignedBlock_swiginit(self, _skycoin.new_coin__SignedBlock())
    __swig_destroy__ = _skycoin.delete_coin__SignedBlock

# Register coin__SignedBlock in _skycoin:
_skycoin.coin__SignedBlock_swigregister(coin__SignedBlock)

class coin__UxHead(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Time = property(_skycoin.coin__UxHead_Time_get, _skycoin.coin__UxHead_Time_set)
    BkSeq = property(_skycoin.coin__UxHead_BkSeq_get, _skycoin.coin__UxHead_BkSeq_set)

    def __init__(self):
        _skycoin.coin__UxHead_swiginit(self, _skycoin.new_coin__UxHead())
    __swig_destroy__ = _skycoin.delete_coin__UxHead

# Register coin__UxHead in _skycoin:
_skycoin.coin__UxHead_swigregister(coin__UxHead)

class coin__UxBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetSrcTransaction(self):
        return _skycoin.coin__UxBody_GetSrcTransaction(self)

    def SetSrcTransaction(self, o):
        return _skycoin.coin__UxBody_SetSrcTransaction(self, o)
    SrcTransaction = property(_skycoin.coin__UxBody_SrcTransaction_get, _skycoin.coin__UxBody_SrcTransaction_set)
    Address = property(_skycoin.coin__UxBody_Address_get, _skycoin.coin__UxBody_Address_set)
    Coins = property(_skycoin.coin__UxBody_Coins_get, _skycoin.coin__UxBody_Coins_set)
    Hours = property(_skycoin.coin__UxBody_Hours_get, _skycoin.coin__UxBody_Hours_set)

    def __init__(self):
        _skycoin.coin__UxBody_swiginit(self, _skycoin.new_coin__UxBody())
    __swig_destroy__ = _skycoin.delete_coin__UxBody

# Register coin__UxBody in _skycoin:
_skycoin.coin__UxBody_swigregister(coin__UxBody)

class coin__UxOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __eq__(self, u):
        return _skycoin.coin__UxOut___eq__(self, u)
    Head = property(_skycoin.coin__UxOut_Head_get, _skycoin.coin__UxOut_Head_set)
    Body = property(_skycoin.coin__UxOut_Body_get, _skycoin.coin__UxOut_Body_set)

    def __init__(self):
        _skycoin.coin__UxOut_swiginit(self, _skycoin.new_coin__UxOut())
    __swig_destroy__ = _skycoin.delete_coin__UxOut

# Register coin__UxOut in _skycoin:
_skycoin.coin__UxOut_swigregister(coin__UxOut)

class httphelper__Address(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _unnamed = property(_skycoin.httphelper__Address__unnamed_get, _skycoin.httphelper__Address__unnamed_set)

    def __init__(self):
        _skycoin.httphelper__Address_swiginit(self, _skycoin.new_httphelper__Address())
    __swig_destroy__ = _skycoin.delete_httphelper__Address

# Register httphelper__Address in _skycoin:
_skycoin.httphelper__Address_swigregister(httphelper__Address)

class httphelper__SHA256(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _unnamed = property(_skycoin.httphelper__SHA256__unnamed_get, _skycoin.httphelper__SHA256__unnamed_set)

    def __init__(self):
        _skycoin.httphelper__SHA256_swiginit(self, _skycoin.new_httphelper__SHA256())
    __swig_destroy__ = _skycoin.delete_httphelper__SHA256

# Register httphelper__SHA256 in _skycoin:
_skycoin.httphelper__SHA256_swigregister(httphelper__SHA256)

class wallet__Balance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Coins = property(_skycoin.wallet__Balance_Coins_get, _skycoin.wallet__Balance_Coins_set)
    Hours = property(_skycoin.wallet__Balance_Hours_get, _skycoin.wallet__Balance_Hours_set)

    def __init__(self):
        _skycoin.wallet__Balance_swiginit(self, _skycoin.new_wallet__Balance())
    __swig_destroy__ = _skycoin.delete_wallet__Balance

# Register wallet__Balance in _skycoin:
_skycoin.wallet__Balance_swigregister(wallet__Balance)

class wallet__BalancePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Confirmed = property(_skycoin.wallet__BalancePair_Confirmed_get, _skycoin.wallet__BalancePair_Confirmed_set)
    Predicted = property(_skycoin.wallet__BalancePair_Predicted_get, _skycoin.wallet__BalancePair_Predicted_set)

    def __init__(self):
        _skycoin.wallet__BalancePair_swiginit(self, _skycoin.new_wallet__BalancePair())
    __swig_destroy__ = _skycoin.delete_wallet__BalancePair

# Register wallet__BalancePair in _skycoin:
_skycoin.wallet__BalancePair_swigregister(wallet__BalancePair)

class wallet__Entry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Address = property(_skycoin.wallet__Entry_Address_get, _skycoin.wallet__Entry_Address_set)
    Public = property(_skycoin.wallet__Entry_Public_get, _skycoin.wallet__Entry_Public_set)
    Secret = property(_skycoin.wallet__Entry_Secret_get, _skycoin.wallet__Entry_Secret_set)

    def __init__(self):
        _skycoin.wallet__Entry_swiginit(self, _skycoin.new_wallet__Entry())
    __swig_destroy__ = _skycoin.delete_wallet__Entry

# Register wallet__Entry in _skycoin:
_skycoin.wallet__Entry_swigregister(wallet__Entry)

class wallet__Note(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TxID = property(_skycoin.wallet__Note_TxID_get, _skycoin.wallet__Note_TxID_set)
    Value = property(_skycoin.wallet__Note_Value_get, _skycoin.wallet__Note_Value_set)

    def __init__(self):
        _skycoin.wallet__Note_swiginit(self, _skycoin.new_wallet__Note())
    __swig_destroy__ = _skycoin.delete_wallet__Note

# Register wallet__Note in _skycoin:
_skycoin.wallet__Note_swigregister(wallet__Note)

class wallet__ReadableNote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TransactionID = property(_skycoin.wallet__ReadableNote_TransactionID_get, _skycoin.wallet__ReadableNote_TransactionID_set)
    ActualNote = property(_skycoin.wallet__ReadableNote_ActualNote_get, _skycoin.wallet__ReadableNote_ActualNote_set)

    def __init__(self):
        _skycoin.wallet__ReadableNote_swiginit(self, _skycoin.new_wallet__ReadableNote())
    __swig_destroy__ = _skycoin.delete_wallet__ReadableNote

# Register wallet__ReadableNote in _skycoin:
_skycoin.wallet__ReadableNote_swigregister(wallet__ReadableNote)

class wallet__UxBalance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Hash = property(_skycoin.wallet__UxBalance_Hash_get, _skycoin.wallet__UxBalance_Hash_set)
    BkSeq = property(_skycoin.wallet__UxBalance_BkSeq_get, _skycoin.wallet__UxBalance_BkSeq_set)
    Address = property(_skycoin.wallet__UxBalance_Address_get, _skycoin.wallet__UxBalance_Address_set)
    Coins = property(_skycoin.wallet__UxBalance_Coins_get, _skycoin.wallet__UxBalance_Coins_set)
    Hours = property(_skycoin.wallet__UxBalance_Hours_get, _skycoin.wallet__UxBalance_Hours_set)

    def __init__(self):
        _skycoin.wallet__UxBalance_swiginit(self, _skycoin.new_wallet__UxBalance())
    __swig_destroy__ = _skycoin.delete_wallet__UxBalance

# Register wallet__UxBalance in _skycoin:
_skycoin.wallet__UxBalance_swigregister(wallet__UxBalance)

SKY_OK = _skycoin.SKY_OK
SKY_ERROR = _skycoin.SKY_ERROR
SKY_BAD_HANDLE = _skycoin.SKY_BAD_HANDLE
SKY_INVALID_TIMESTRING = _skycoin.SKY_INVALID_TIMESTRING
SKY_PKG_API = _skycoin.SKY_PKG_API
SKY_PKG_CIPHER = _skycoin.SKY_PKG_CIPHER
SKY_PKG_CLI = _skycoin.SKY_PKG_CLI
SKY_PKG_COIN = _skycoin.SKY_PKG_COIN
SKY_PKG_CONSENSUS = _skycoin.SKY_PKG_CONSENSUS
SKY_PKG_DAEMON = _skycoin.SKY_PKG_DAEMON
SKY_PKG_GUI = _skycoin.SKY_PKG_GUI
SKY_PKG_SKYCOIN = _skycoin.SKY_PKG_SKYCOIN
SKY_PKG_UTIL = _skycoin.SKY_PKG_UTIL
SKY_PKG_VISOR = _skycoin.SKY_PKG_VISOR
SKY_PKG_WALLET = _skycoin.SKY_PKG_WALLET
SKY_PKG_PARAMS = _skycoin.SKY_PKG_PARAMS
SKY_PKG_LIBCGO = _skycoin.SKY_PKG_LIBCGO
SKY_ErrAddressInvalidLength = _skycoin.SKY_ErrAddressInvalidLength
SKY_ErrAddressInvalidChecksum = _skycoin.SKY_ErrAddressInvalidChecksum
SKY_ErrAddressInvalidVersion = _skycoin.SKY_ErrAddressInvalidVersion
SKY_ErrAddressInvalidPubKey = _skycoin.SKY_ErrAddressInvalidPubKey
SKY_ErrAddressInvalidFirstByte = _skycoin.SKY_ErrAddressInvalidFirstByte
SKY_ErrAddressInvalidLastByte = _skycoin.SKY_ErrAddressInvalidLastByte
SKY_ErrBufferUnderflow = _skycoin.SKY_ErrBufferUnderflow
SKY_ErrInvalidOmitEmpty = _skycoin.SKY_ErrInvalidOmitEmpty
SKY_ErrInvalidLengthPubKey = _skycoin.SKY_ErrInvalidLengthPubKey
SKY_ErrPubKeyFromNullSecKey = _skycoin.SKY_ErrPubKeyFromNullSecKey
SKY_ErrPubKeyFromBadSecKey = _skycoin.SKY_ErrPubKeyFromBadSecKey
SKY_ErrInvalidLengthSecKey = _skycoin.SKY_ErrInvalidLengthSecKey
SKY_ErrECHDInvalidPubKey = _skycoin.SKY_ErrECHDInvalidPubKey
SKY_ErrECHDInvalidSecKey = _skycoin.SKY_ErrECHDInvalidSecKey
SKY_ErrInvalidLengthSig = _skycoin.SKY_ErrInvalidLengthSig
SKY_ErrInvalidLengthRipemd160 = _skycoin.SKY_ErrInvalidLengthRipemd160
SKY_ErrInvalidLengthSHA256 = _skycoin.SKY_ErrInvalidLengthSHA256
SKY_ErrInvalidBase58Char = _skycoin.SKY_ErrInvalidBase58Char
SKY_ErrInvalidBase58String = _skycoin.SKY_ErrInvalidBase58String
SKY_ErrInvalidBase58Length = _skycoin.SKY_ErrInvalidBase58Length
SKY_ErrInvalidHexLength = _skycoin.SKY_ErrInvalidHexLength
SKY_ErrInvalidBytesLength = _skycoin.SKY_ErrInvalidBytesLength
SKY_ErrInvalidPubKey = _skycoin.SKY_ErrInvalidPubKey
SKY_ErrInvalidSecKey = _skycoin.SKY_ErrInvalidSecKey
SKY_ErrInvalidSigPubKeyRecovery = _skycoin.SKY_ErrInvalidSigPubKeyRecovery
SKY_ErrInvalidSecKeyHex = _skycoin.SKY_ErrInvalidSecKeyHex
SKY_ErrInvalidAddressForSig = _skycoin.SKY_ErrInvalidAddressForSig
SKY_ErrInvalidHashForSig = _skycoin.SKY_ErrInvalidHashForSig
SKY_ErrPubKeyRecoverMismatch = _skycoin.SKY_ErrPubKeyRecoverMismatch
SKY_ErrInvalidSigInvalidPubKey = _skycoin.SKY_ErrInvalidSigInvalidPubKey
SKY_ErrInvalidSigValidity = _skycoin.SKY_ErrInvalidSigValidity
SKY_ErrInvalidSigForMessage = _skycoin.SKY_ErrInvalidSigForMessage
SKY_ErrInvalidSecKyVerification = _skycoin.SKY_ErrInvalidSecKyVerification
SKY_ErrNullPubKeyFromSecKey = _skycoin.SKY_ErrNullPubKeyFromSecKey
SKY_ErrInvalidDerivedPubKeyFromSecKey = _skycoin.SKY_ErrInvalidDerivedPubKeyFromSecKey
SKY_ErrInvalidPubKeyFromHash = _skycoin.SKY_ErrInvalidPubKeyFromHash
SKY_ErrPubKeyFromSecKeyMismatch = _skycoin.SKY_ErrPubKeyFromSecKeyMismatch
SKY_ErrInvalidLength = _skycoin.SKY_ErrInvalidLength
SKY_ErrBitcoinWIFInvalidFirstByte = _skycoin.SKY_ErrBitcoinWIFInvalidFirstByte
SKY_ErrBitcoinWIFInvalidSuffix = _skycoin.SKY_ErrBitcoinWIFInvalidSuffix
SKY_ErrBitcoinWIFInvalidChecksum = _skycoin.SKY_ErrBitcoinWIFInvalidChecksum
SKY_ErrEmptySeed = _skycoin.SKY_ErrEmptySeed
SKY_ErrInvalidSig = _skycoin.SKY_ErrInvalidSig
SKY_ErrMissingPassword = _skycoin.SKY_ErrMissingPassword
SKY_ErrDataTooLarge = _skycoin.SKY_ErrDataTooLarge
SKY_ErrInvalidChecksumLength = _skycoin.SKY_ErrInvalidChecksumLength
SKY_ErrInvalidChecksum = _skycoin.SKY_ErrInvalidChecksum
SKY_ErrInvalidNonceLength = _skycoin.SKY_ErrInvalidNonceLength
SKY_ErrInvalidBlockSize = _skycoin.SKY_ErrInvalidBlockSize
SKY_ErrReadDataHashFailed = _skycoin.SKY_ErrReadDataHashFailed
SKY_ErrInvalidPassword = _skycoin.SKY_ErrInvalidPassword
SKY_ErrReadDataLengthFailed = _skycoin.SKY_ErrReadDataLengthFailed
SKY_ErrInvalidDataLength = _skycoin.SKY_ErrInvalidDataLength
SKY_ErrTemporaryInsufficientBalance = _skycoin.SKY_ErrTemporaryInsufficientBalance
SKY_ErrAddress = _skycoin.SKY_ErrAddress
SKY_ErrWalletName = _skycoin.SKY_ErrWalletName
SKY_ErrJSONMarshal = _skycoin.SKY_ErrJSONMarshal
SKY_WalletLoadError = _skycoin.SKY_WalletLoadError
SKY_WalletSaveError = _skycoin.SKY_WalletSaveError
SKY_ErrAddEarnedCoinHoursAdditionOverflow = _skycoin.SKY_ErrAddEarnedCoinHoursAdditionOverflow
SKY_ErrUint64MultOverflow = _skycoin.SKY_ErrUint64MultOverflow
SKY_ErrUint64AddOverflow = _skycoin.SKY_ErrUint64AddOverflow
SKY_ErrUint32AddOverflow = _skycoin.SKY_ErrUint32AddOverflow
SKY_ErrUint64OverflowsInt64 = _skycoin.SKY_ErrUint64OverflowsInt64
SKY_ErrInt64UnderflowsUint64 = _skycoin.SKY_ErrInt64UnderflowsUint64
SKY_ErrIntUnderflowsUint32 = _skycoin.SKY_ErrIntUnderflowsUint32
SKY_ErrIntOverflowsUint32 = _skycoin.SKY_ErrIntOverflowsUint32
SKY_ErrPeerlistFull = _skycoin.SKY_ErrPeerlistFull
SKY_ErrInvalidAddress = _skycoin.SKY_ErrInvalidAddress
SKY_ErrNoLocalhost = _skycoin.SKY_ErrNoLocalhost
SKY_ErrNotExternalIP = _skycoin.SKY_ErrNotExternalIP
SKY_ErrPortTooLow = _skycoin.SKY_ErrPortTooLow
SKY_ErrBlacklistedAddress = _skycoin.SKY_ErrBlacklistedAddress
SKY_ErrDisconnectWriteFailed = _skycoin.SKY_ErrDisconnectWriteFailed
SKY_ErrDisconnectSetReadDeadlineFailed = _skycoin.SKY_ErrDisconnectSetReadDeadlineFailed
SKY_ErrDisconnectInvalidMessageLength = _skycoin.SKY_ErrDisconnectInvalidMessageLength
SKY_ErrDisconnectMalformedMessage = _skycoin.SKY_ErrDisconnectMalformedMessage
SKY_ErrDisconnectUnknownMessage = _skycoin.SKY_ErrDisconnectUnknownMessage
SKY_ErrConnectionPoolClosed = _skycoin.SKY_ErrConnectionPoolClosed
SKY_ErrWriteQueueFull = _skycoin.SKY_ErrWriteQueueFull
SKY_ErrNoReachableConnections = _skycoin.SKY_ErrNoReachableConnections
SKY_ErrMaxDefaultConnectionsReached = _skycoin.SKY_ErrMaxDefaultConnectionsReached
SKY_ErrDisconnectVersionNotSupported = _skycoin.SKY_ErrDisconnectVersionNotSupported
SKY_ErrDisconnectIntroductionTimeout = _skycoin.SKY_ErrDisconnectIntroductionTimeout
SKY_ErrDisconnectIsBlacklisted = _skycoin.SKY_ErrDisconnectIsBlacklisted
SKY_ErrDisconnectSelf = _skycoin.SKY_ErrDisconnectSelf
SKY_ErrDisconnectConnectedTwice = _skycoin.SKY_ErrDisconnectConnectedTwice
SKY_ErrDisconnectIdle = _skycoin.SKY_ErrDisconnectIdle
SKY_ErrDisconnectNoIntroduction = _skycoin.SKY_ErrDisconnectNoIntroduction
SKY_ErrDisconnectIPLimitReached = _skycoin.SKY_ErrDisconnectIPLimitReached
SKY_ErrDisconnectMaxDefaultConnectionReached = _skycoin.SKY_ErrDisconnectMaxDefaultConnectionReached
SKY_ErrDisconnectMaxOutgoingConnectionsReached = _skycoin.SKY_ErrDisconnectMaxOutgoingConnectionsReached
SKY_ConnectionError = _skycoin.SKY_ConnectionError
SKY_ErrTxnNoFee = _skycoin.SKY_ErrTxnNoFee
SKY_ErrTxnInsufficientFee = _skycoin.SKY_ErrTxnInsufficientFee
SKY_ErrTxnInsufficientCoinHours = _skycoin.SKY_ErrTxnInsufficientCoinHours
SKY_ErrNegativeValue = _skycoin.SKY_ErrNegativeValue
SKY_ErrTooManyDecimals = _skycoin.SKY_ErrTooManyDecimals
SKY_ErrTooLarge = _skycoin.SKY_ErrTooLarge
SKY_ErrEmptyDirectoryName = _skycoin.SKY_ErrEmptyDirectoryName
SKY_ErrDotDirectoryName = _skycoin.SKY_ErrDotDirectoryName
SKY_ErrHistoryDBCorrupted = _skycoin.SKY_ErrHistoryDBCorrupted
SKY_ErrUxOutNotExist = _skycoin.SKY_ErrUxOutNotExist
SKY_ErrNoHeadBlock = _skycoin.SKY_ErrNoHeadBlock
SKY_ErrMissingSignature = _skycoin.SKY_ErrMissingSignature
SKY_ErrUnspentNotExist = _skycoin.SKY_ErrUnspentNotExist
SKY_ErrVerifyStopped = _skycoin.SKY_ErrVerifyStopped
SKY_ErrCreateBucketFailed = _skycoin.SKY_ErrCreateBucketFailed
SKY_ErrBucketNotExist = _skycoin.SKY_ErrBucketNotExist
SKY_ErrTxnViolatesHardConstraint = _skycoin.SKY_ErrTxnViolatesHardConstraint
SKY_ErrTxnViolatesSoftConstraint = _skycoin.SKY_ErrTxnViolatesSoftConstraint
SKY_ErrTxnViolatesUserConstraint = _skycoin.SKY_ErrTxnViolatesUserConstraint
SKY_ErrInsufficientBalance = _skycoin.SKY_ErrInsufficientBalance
SKY_ErrInsufficientHours = _skycoin.SKY_ErrInsufficientHours
SKY_ErrZeroSpend = _skycoin.SKY_ErrZeroSpend
SKY_ErrSpendingUnconfirmed = _skycoin.SKY_ErrSpendingUnconfirmed
SKY_ErrInvalidEncryptedField = _skycoin.SKY_ErrInvalidEncryptedField
SKY_ErrWalletEncrypted = _skycoin.SKY_ErrWalletEncrypted
SKY_ErrWalletNotEncrypted = _skycoin.SKY_ErrWalletNotEncrypted
SKY_ErrWalletMissingPassword = _skycoin.SKY_ErrWalletMissingPassword
SKY_ErrMissingEncrypt = _skycoin.SKY_ErrMissingEncrypt
SKY_ErrWalletInvalidPassword = _skycoin.SKY_ErrWalletInvalidPassword
SKY_ErrMissingSeed = _skycoin.SKY_ErrMissingSeed
SKY_ErrMissingAuthenticated = _skycoin.SKY_ErrMissingAuthenticated
SKY_ErrWrongCryptoType = _skycoin.SKY_ErrWrongCryptoType
SKY_ErrWalletNotExist = _skycoin.SKY_ErrWalletNotExist
SKY_ErrSeedUsed = _skycoin.SKY_ErrSeedUsed
SKY_ErrWalletAPIDisabled = _skycoin.SKY_ErrWalletAPIDisabled
SKY_ErrSeedAPIDisabled = _skycoin.SKY_ErrSeedAPIDisabled
SKY_ErrWalletNameConflict = _skycoin.SKY_ErrWalletNameConflict
SKY_ErrInvalidHoursSelectionMode = _skycoin.SKY_ErrInvalidHoursSelectionMode
SKY_ErrInvalidHoursSelectionType = _skycoin.SKY_ErrInvalidHoursSelectionType
SKY_ErrUnknownAddress = _skycoin.SKY_ErrUnknownAddress
SKY_ErrUnknownUxOut = _skycoin.SKY_ErrUnknownUxOut
SKY_ErrNoUnspents = _skycoin.SKY_ErrNoUnspents
SKY_ErrNullChangeAddress = _skycoin.SKY_ErrNullChangeAddress
SKY_ErrMissingTo = _skycoin.SKY_ErrMissingTo
SKY_ErrZeroCoinsTo = _skycoin.SKY_ErrZeroCoinsTo
SKY_ErrNullAddressTo = _skycoin.SKY_ErrNullAddressTo
SKY_ErrDuplicateTo = _skycoin.SKY_ErrDuplicateTo
SKY_ErrMissingWalletID = _skycoin.SKY_ErrMissingWalletID
SKY_ErrIncludesNullAddress = _skycoin.SKY_ErrIncludesNullAddress
SKY_ErrDuplicateAddresses = _skycoin.SKY_ErrDuplicateAddresses
SKY_ErrZeroToHoursAuto = _skycoin.SKY_ErrZeroToHoursAuto
SKY_ErrMissingModeAuto = _skycoin.SKY_ErrMissingModeAuto
SKY_ErrInvalidHoursSelMode = _skycoin.SKY_ErrInvalidHoursSelMode
SKY_ErrInvalidModeManual = _skycoin.SKY_ErrInvalidModeManual
SKY_ErrInvalidHoursSelType = _skycoin.SKY_ErrInvalidHoursSelType
SKY_ErrMissingShareFactor = _skycoin.SKY_ErrMissingShareFactor
SKY_ErrInvalidShareFactor = _skycoin.SKY_ErrInvalidShareFactor
SKY_ErrShareFactorOutOfRange = _skycoin.SKY_ErrShareFactorOutOfRange
SKY_ErrWalletConstraint = _skycoin.SKY_ErrWalletConstraint
SKY_ErrDuplicateUxOuts = _skycoin.SKY_ErrDuplicateUxOuts
SKY_ErrUnknownWalletID = _skycoin.SKY_ErrUnknownWalletID
SKY_ErrVerifySignatureInvalidInputsNils = _skycoin.SKY_ErrVerifySignatureInvalidInputsNils
SKY_ErrVerifySignatureInvalidSigLength = _skycoin.SKY_ErrVerifySignatureInvalidSigLength
SKY_ErrVerifySignatureInvalidPubkeysLength = _skycoin.SKY_ErrVerifySignatureInvalidPubkeysLength
SKY_ErrInvalidDecimals = _skycoin.SKY_ErrInvalidDecimals


